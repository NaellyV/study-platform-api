// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String
  name             String
  notificationToken String?
  disciplines      Discipline[]
  schedules        Schedule[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Discipline {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String     @default("#3b82f6")
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  contents    Content[]
  schedules   Schedule[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Content {
  id           String     @id @default(uuid())
  name         String
  description  String?
  isCompleted  Boolean    @default(false)
  disciplineId String
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  tasks        Task[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  description String
  isCompleted Boolean    @default(false)
  dueDate     DateTime?
  contentId   String
  content     Content    @relation(fields: [contentId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Schedule {
  id            String     @id @default(uuid())
  dayOfWeek     Int        // 0-6 (Domingo-SÃ¡bado)
  startTime     String     // Formato HH:MM:SS
  endTime       String     // Formato HH:MM:SS
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  disciplineId  String?
  discipline    Discipline? @relation(fields: [disciplineId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
